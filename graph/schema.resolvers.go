package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/tkdn/go-study/graph/model"
	"github.com/tkdn/go-study/infra/database"
	"github.com/tkdn/go-study/log"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*database.User, error) {
	u, err := r.UserRepo.Insert(input.Name, input.Age)
	if err != nil {
		log.Logger.Error(err.Error())
		return nil, err
	}
	return u, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*database.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*database.User, error) {
	users, err := r.UserRepo.GetList()
	if err != nil {
		log.Logger.Error(err.Error())
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*database.User, error) {
	u, err := r.UserRepo.GetById(id)
	if err != nil {
		log.Logger.Error(err.Error())
		return nil, err
	}
	return u, nil
}

// Post is the resolver for the post field.
func (r *userResolver) Post(ctx context.Context, obj *database.User) ([]*database.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
